digraph "CHDataStructures.h"
{
  bgcolor="transparent";
  edge [fontname="LucidaGrande",fontsize="9",labelfontname="LucidaGrande",labelfontsize="9"];
  node [fontname="LucidaGrande",fontsize="9",shape=record];
  Node1 [label="CHDataStructures.h",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node2 [label="Foundation/Foundation.h",height=0.2,width=0.4,color="grey75"];
  Node1 -> Node3 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node3 [label="CHDeque.h",height=0.2,width=0.4,color="black",URL="$_c_h_deque_8h.html",tooltip="A deque protocol with methods for insertion and removal on both ends."];
  Node3 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node4 [label="Util.h",height=0.2,width=0.4,color="black",URL="$_util_8h.html",tooltip="A group of utility C functions for simplifying common exceptions and logging."];
  Node4 -> Node2 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node5 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node5 [label="CHHeap.h",height=0.2,width=0.4,color="black",URL="$_c_h_heap_8h.html",tooltip="A heap protocol, suitable for use with many variations of the heap structure."];
  Node5 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node6 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node6 [label="CHLinkedList.h",height=0.2,width=0.4,color="black",URL="$_c_h_linked_list_8h.html",tooltip="A linked list protocol with methods that work for singly- or doubly-linked lists."];
  Node6 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node7 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node7 [label="CHQueue.h",height=0.2,width=0.4,color="black",URL="$_c_h_queue_8h.html",tooltip="A queue protocol with methods for FIFO (&quot;First In, First Out&quot;) operations."];
  Node7 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node8 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node8 [label="CHSearchTree.h",height=0.2,width=0.4,color="black",URL="$_c_h_search_tree_8h.html",tooltip="A protocol which specifes an interface for N-ary search trees."];
  Node8 -> Node9 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node9 [label="CHSortedSet.h",height=0.2,width=0.4,color="black",URL="$_c_h_sorted_set_8h.html",tooltip="A protocol which specifes an interface for sorted sets."];
  Node9 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node9 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node10 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node10 [label="CHStack.h",height=0.2,width=0.4,color="black",URL="$_c_h_stack_8h.html",tooltip="A stack protocol with methods for LIFO (&quot;Last In, First Out&quot;) operations."];
  Node10 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node11 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node11 [label="CHAnderssonTree.h",height=0.2,width=0.4,color="black",URL="$_c_h_andersson_tree_8h.html",tooltip="An AA-tree implementation of CHSearchTree."];
  Node11 -> Node12 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node12 [label="CHAbstractBinarySearchTree.h",height=0.2,width=0.4,color="black",URL="$_c_h_abstract_binary_search_tree_8h.html",tooltip="An abstract CHSearchTree implementation with many default method implementations."];
  Node12 -> Node8 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node13 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node13 [label="CHBinaryHeap.h",height=0.2,width=0.4,color="black",URL="$_c_h_binary_heap_8h.html",tooltip="A CHHeap implemented using a CFBinaryHeapRef internally."];
  Node13 -> Node5 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node14 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node14 [label="CHAVLTree.h",height=0.2,width=0.4,color="black",URL="$_c_h_a_v_l_tree_8h.html",tooltip="An AVL tree implementation of CHSearchTree."];
  Node14 -> Node12 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node15 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node15 [label="CHCircularBuffer.h",height=0.2,width=0.4,color="black",URL="$_c_h_circular_buffer_8h.html",tooltip="A circular buffer array."];
  Node15 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node16 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node16 [label="CHCircularBufferDeque.h",height=0.2,width=0.4,color="black",URL="$_c_h_circular_buffer_deque_8h.html",tooltip="A simple CHDeque implemented using a CHCircularBuffer."];
  Node16 -> Node3 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node16 -> Node15 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node17 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node17 [label="CHCircularBufferQueue.h",height=0.2,width=0.4,color="black",URL="$_c_h_circular_buffer_queue_8h.html",tooltip="A simple CHQueue implemented using a CHCircularBuffer."];
  Node17 -> Node7 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node17 -> Node15 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node18 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node18 [label="CHCircularBufferStack.h",height=0.2,width=0.4,color="black",URL="$_c_h_circular_buffer_stack_8h.html",tooltip="A simple CHStack implemented using a CHCircularBuffer."];
  Node18 -> Node10 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node18 -> Node15 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node19 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node19 [label="CHDoublyLinkedList.h",height=0.2,width=0.4,color="black",URL="$_c_h_doubly_linked_list_8h.html",tooltip="A standard doubly-linked list implementation with pointers to head and tail."];
  Node19 -> Node6 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node20 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node20 [label="CHListDeque.h",height=0.2,width=0.4,color="black",URL="$_c_h_list_deque_8h.html",tooltip="A simple CHDeque implemented using a CHDoublyLinkedList."];
  Node20 -> Node3 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node20 -> Node21 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node21 [label="CHAbstractListCollection.h",height=0.2,width=0.4,color="black",URL="$_c_h_abstract_list_collection_8h.html",tooltip="An abstract class which implements common behaviors of list-based collections."];
  Node21 -> Node6 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node22 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node22 [label="CHListQueue.h",height=0.2,width=0.4,color="black",URL="$_c_h_list_queue_8h.html",tooltip="A simple CHQueue implemented using a CHSinglyLinkedList."];
  Node22 -> Node7 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node22 -> Node21 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node23 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node23 [label="CHListStack.h",height=0.2,width=0.4,color="black",URL="$_c_h_list_stack_8h.html",tooltip="A simple CHStack implemented using a CHSinglyLinkedList."];
  Node23 -> Node10 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node23 -> Node21 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node24 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node24 [label="CHMultiDictionary.h",height=0.2,width=0.4,color="black",URL="$_c_h_multi_dictionary_8h.html",tooltip="A multimap in which multiple values may be associated with a given key."];
  Node24 -> Node25 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node25 [label="CHMutableDictionary.h",height=0.2,width=0.4,color="black",URL="$_c_h_mutable_dictionary_8h.html",tooltip="A mutable dictionary class."];
  Node25 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node26 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node26 [label="CHMutableArrayHeap.h",height=0.2,width=0.4,color="black",URL="$_c_h_mutable_array_heap_8h.html",tooltip="A simple CHHeap implemented as a subclass of NSMutableArray."];
  Node26 -> Node5 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node27 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node27 [label="CHOrderedDictionary.h",height=0.2,width=0.4,color="black",URL="$_c_h_ordered_dictionary_8h.html",tooltip="A dictionary which enumerates keys in the order in which they are inserted."];
  Node27 -> Node25 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node28 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node28 [label="CHOrderedSet.h",height=0.2,width=0.4,color="black",URL="$_c_h_ordered_set_8h.html",tooltip="A set which also maintains order of insertion, including manual reordering."];
  Node28 -> Node29 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node29 [label="CHMutableSet.h",height=0.2,width=0.4,color="black",URL="$_c_h_mutable_set_8h.html",tooltip="A mutable set class."];
  Node29 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node30 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node30 [label="CHRedBlackTree.h",height=0.2,width=0.4,color="black",URL="$_c_h_red_black_tree_8h.html",tooltip="A Red-Black tree implementation of CHSearchTree."];
  Node30 -> Node12 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node31 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node31 [label="CHSinglyLinkedList.h",height=0.2,width=0.4,color="black",URL="$_c_h_singly_linked_list_8h.html",tooltip="A standard singly-linked list implementation with pointers to head and tail."];
  Node31 -> Node6 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node32 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node32 [label="CHSortedDictionary.h",height=0.2,width=0.4,color="black",URL="$_c_h_sorted_dictionary_8h.html",tooltip="A dictionary which enumerates keys according to their natural sorted order."];
  Node32 -> Node25 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node32 -> Node9 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node33 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node33 [label="CHTreap.h",height=0.2,width=0.4,color="black",URL="$_c_h_treap_8h.html",tooltip="A Treap implementation of CHSearchTree."];
  Node33 -> Node12 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node34 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node34 [label="CHUnbalancedTree.h",height=0.2,width=0.4,color="black",URL="$_c_h_unbalanced_tree_8h.html",tooltip="A generic, unbalanced implementation of CHSearchTree."];
  Node34 -> Node12 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
  Node1 -> Node4 [color="midnightblue",fontsize="9",style="solid",fontname="LucidaGrande"];
}
